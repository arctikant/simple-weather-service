[tool.poetry]
name = "weather-service"
version = "0.1.0"
description = "Simple Weather Service with OpenWeather and AWS stack"
authors = ["arctikant <antonov1123@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = {extras = ["standard"], version = "^0.115.0"}
pydantic-settings = "^2.5.2"
httpx = "^0.27.2"
aiobotocore = "^2.15.1"
orjson = "^3.10.7"


[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
pytest-dotenv = "^0.5.2"
pytest-asyncio = "^0.24.0"
ruff = "^0.6.7"
mypy = "^1.11.2"
cerberus = "^1.3.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[virtualenvs]
in-project = true

[tool.ruff]
target-version = "py312"
exclude = [".venv", "tmp", "volume"]
line-length = 120

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.format]
quote-style = "single"

[tool.mypy]
python_version = "3.12"
exclude = [".venv", "tmp", "volume"]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
minversion = "6.0"
addopts = "-ra"
asyncio_mode = "auto"
testpaths = [
    "tests",
]
env_override_existing_values = 1
env_files = [
    ".test.env"
]